server {
    listen 16667;
    server_name 127.0.0.1;

    error_log /tmp/ngx_error.log;

    location /tcp {
        content_by_lua '
            json = require "cjson"
            t = {
                ["uri"] = ngx.var.uri,
            }
            ngx.header.content_type = "application/json"
            local sock = ngx.socket.tcp()
            sock:settimeout(1000);

            local ok, err = sock:connect("127.0.0.1", 6666);
            if not ok then
                t["error"] = err
                local buf= json.encode(t)
                ngx.say(buf)
                ngx.exit(ngx.HTTP_OK)
            end

            local args = ngx.req.get_uri_args()
            local params = {}
            for k, v in pairs(args) do
                params[k] = v
            end
            t["params"] = params

            local buf = json.encode(t)
            local n = tostring(#buf)
            local head = n
            for i = 1, 8 - #n do
                head = "0" .. head
            end
            local bytes, err = sock:send(head)
            if not bytes then
                t["error"] = "send head error:" .. err
                local buf = json.encode(t)
                ngx.say(buf)
                ngx.exit(ngx.HTTP_OK)
            end

            local bytes, err = sock:send(buf)
            if not bytes then
                t["error"] = "send body error:" .. err
                local buf = json.encode(t)
                ngx.say(buf)
                ngx.exit(ngx.HTTP_OK)
            end

            local head, err = sock:receive(8)
            if not head then
                t["error"] = "receive head error:" .. err
                local buf = json.encode(t)
                ngx.say(buf)
                ngx.exit(ngx.HTTP_OK)
            end

            local size = tonumber(head)
            local resp, err = sock:receive(size)
            if not head then
                t["error"] = "receive body error:" .. err
                local buf = json.encode(t)
                ngx.say(buf)
                ngx.exit(ngx.HTTP_OK)
            end

            t["size"] = size
            t["resp"] = json.decode(resp)
            local buf = json.encode(t)
            ngx.say(buf)

            sock:setkeepalive(10000, 10) -- 10 sec
        ';
    }
}
